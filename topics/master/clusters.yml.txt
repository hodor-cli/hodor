The Clusters.yml File
---------------------------------------------------------------------------------------------------
The "clusters.yml" file is a file Hodor reads at startup that allows you to define multiple hadoop
clusters, and the url and resource bindings they require, so that your Hodor session can be easily
switched between multiple available Hadoop clusters. Hodor''s namespaces and commands use the url
and resource bindings from clusters.yml to select the destination for its various SSH and REST
calls. The clusters.yml file is expected in your hadoop project git repo at the path:

    "<repo_root>/config/clusters.yml"

The clusters.yml file will typically look something like the following:

    :production:
      :nameNode: hdfs://hadoop-prod.mycompany.com:8020
      :jobTracker: hadoop-prod.mycompany.com:8050
      :oozie_url: http://hadoop-prod.mycompany.com:11000/oozie

    :staging:
      :nameNode: hdfs://hadoop-stage.mycompany.com:8020
      :jobTracker: hadoop-stage.mycompany.com:8050
      :oozie_url: http://hadoop-stage.mycompany.com:11000/oozie

To reduce repetition, employ back referencing values previously defined in the file using the ${} operator with or without the ^ specifier.
The earlier clusters.yml file example could be modified as follows to reduce repetition
and to assure consistency of definitions.

    :standardSuffixes : &suffixes
      :namePort: 8020
      :oozieSuffix: 11000/oozie
      :jobTrackerPort: 8050

    :templates: &templates
      :nameNode: hdfs://${^hadoopBaseUrl}/:${namePort)
      :jobTracker: ${^hadoopBaseUrl}:${jobTrackerPort)
      :oozie_url: http://${^hadoopBaseUrl}:${oozieSuffix)

    :production:
      <<suffixes
      :hadoopBaseUrl: hadoop-prod.mycompany.com
      <<: *templates

     :staging:
       <<suffixes
       :hadoopBaseUrl: hadoop-stage.mycompany.com
       <<: *templates

--- Handling sensitive information in the clusters.yml file ---
Starting in Hodor 1.0.3 the information in the secrets configuration will be merged into the clusters configuration. In order
to use this new feature reliably:
1) Replace the sensitive property values the clusters.yml file with a string starting with #required and containing a description
   of the property.  For example the YAML entry might look like:
   some_password: "required for logging into some resource"
   If the #required tag is not replaced during the process of generating environment settings an exception listing all
   missing properties will be thrown.
2) Add the value for the property to the secrets configuration.

Here is a simple example:
This would appear in the clusters.yml file:
production:
    db_name: target_db
    db_user_name: "#required defined under production"
    db_password: "#required defined under production"

In config/secrets:
production:
    db_user_name: "#required defined under secrets/production"
    db_password: "#required defined under secrets/production"

In the secrets.yml file hat overrides the above secrets file
production:
    db_user_name: joe_db
    db_password: XYZ12345Xx

After environment settings are generated the configuration for production would be:
{ production: { db_name: target_db, db_user_name: joe_db,  db_password: XYZ12345Xx } }








The section (staging or production) that Hodor uses (e.g. the "target cluster") is configured using:

    $ export HADOOP_ENV=production

To display a list of all key/value pairs that are defined for the current target cluster:

    $ hodor master:config

To view more information about how the clusters.yml keys and values can be used to
parameterize your job properties, type:

    $ hodor oozie:topic compose_job_properties


