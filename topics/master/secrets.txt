Secrets Configuration
---------------------------------------------------------------------------------------------------
Secrets configuration functionality is provided so properties containing sensitive information can be stored and managed without
checking into source control.

*** Setting up the standard approach to use secrets functionality ***
Note: while Hodor's Secrets Configuration facilities can accommodate any number of secret files, the standard, recommended
approach employs three of them, each fulfilling different purposes. The three files would be one
stored in the config directory, a second stored on S3 and a third stored in the config/.private directory.
The first secrets file will be checked into source control and will contain no sensitive information.  The primary purpose
of this file is for setting up required properties.  Properties definitions from subsequent secrets files will be merged
into the definitions from this file.  The second secrets file is located on S3, properties that will be used in production
or by all team members are defined here. Values set here will override those set in the first properties file but will be
overidden by values set in the last properties file.  The secrets file in .private should never be checked into source
control.  This file enables local overrides.
1) Add AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY and AWS_REGION to your environment.
2) Create a load_sets.yml file in the config directory with entries similar to the following:
secrets:
  on_required_missing: :fail
  sources:
      - yml:
         local:
           folder: config
           config_file_name: secrets
      - yml:
         s3:
           bucket: [bucket_where_secrets_are_stored]
           folder: [folder_where_secrets_are_stored_in_bucket]
           config_file_name: secrets
      - yml:
           local:
             folder: config/.private
             config_file_name: secrets
3) Set up secrets file in the config directory.  The primary purpose of this file is declare required properties.  If a
a required property has not been set after merging all secrets files together a error will be raised.  An example yml
formatted secrets file would look like this (#required at the beginning of the string indicates this is a required value):

db1_user_name: "#required talk to sys ops if you don't know this value"
db1_pwd: "#required talk to sys ops if you don't know this value"
db2_user_name: "#required this is your own username for db_2"
db2_pwd: "#required this is your own password for db_2"

4) Set up secrets file on S3.  This should hold the standard secrets used in production or shared between developers.
   An example yml formatted secrets file would look like this:

db1_user_name: db_user
db1_pwd: 12345XXX
db3_user_name: db3_user
db3_pwd: 246XXY

5) Set up config/.private/secrets file on S3.  This should hold overrides and secrets unique to you.
   An example yml formatted secrets file would look like this:

db2_user_name: current_user
db2_pwd: XXXyy44
db3_user_name: current_user
db3_pwd: XXYZZZZZ


The merged secrets from the above configurations would be:

db1_user_name: db_user
db1_pwd: 12345XXX
db2_user_name: current_user
db2_pwd: XXXyy44
db3_user_name: current_user
db3_pwd: XXYZZZZZ

To display a list of all key/value pairs that are defined for secrets:

    $ hodor master:config



